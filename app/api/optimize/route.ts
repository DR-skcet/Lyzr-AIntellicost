import { type NextRequest, NextResponse } from "next/server";
import fetch, { Headers } from "node-fetch";
import PDFDocument from "pdfkit";
import nodemailer from "nodemailer";

// -------------------------------
// Environment Variables for Security
// -------------------------------
const EMAIL_USER = process.env.EMAIL_USER || 'idurairaj2002@gmail.com';
const EMAIL_PASS = process.env.EMAIL_PASS || 'tqfv euvv upwt ecgj';
const LYZR_API_KEY = process.env.LYZR_API_KEY || 'sk-default-1iwEIJhUyvKSOUMyxEFoir2V5dyEuZR7';
const LYZR_AGENT_ID = process.env.LYZR_AGENT_ID || '68636ddcb473fbfdc44cef40';

// -------------------------------
// PDF Generator Function
// -------------------------------
function cleanTextForPdf(text: string): string {
  // Remove non-ASCII characters for PDF compatibility
  return text.replace(/[^\x00-\x7F]/g, '');
}

function generateStructuredPdf(agentOutput: string): Buffer {
  // --- Clean and split output into sections (Streamlit logic) ---
  const cleanedOutput = cleanTextForPdf(agentOutput);
  const sections = cleanedOutput.split(/###\s*|##\s*/).filter(section => section.trim());

  // --- PDFKit setup ---
  const doc = new PDFDocument({ autoFirstPage: false, size: 'A4', margin: 40 });
  const buffers: Buffer[] = [];
  doc.on('data', buffers.push.bind(buffers));
  doc.on('end', () => {});

  // --- Professional Cover Page (Streamlit style) ---
  doc.addPage();
  doc.font('Helvetica-Bold').fontSize(22).fillColor('#2c3e50');
  doc.moveDown(3);
  doc.text('AIntellicost', { align: 'center' });
  doc.moveDown(1);
  doc.fontSize(14).font('Helvetica-Bold');
  doc.text('AI Cost Optimization Report', { align: 'center' });
  doc.moveDown(0.5);
  doc.fontSize(11).font('Helvetica-Oblique').fillColor('#646464');
  doc.text('Empowering Smarter AI Investments', { align: 'center' });
  doc.moveDown(8);
  doc.fontSize(10).font('Helvetica').fillColor('#787878');
  doc.text('Confidential | Generated by AIntellicost', { align: 'center' });
  doc.fillColor('#000000');

  // --- Main Content (Streamlit style, improved for clarity) ---
  doc.addPage();
  let y = 50;
  // Increase width for more space and better alignment
  const leftMargin = 40;
  const contentWidth = 530;
  for (let idx = 0; idx < sections.length; idx++) {
    const section = sections[idx].trim();
    if (!section) continue;
    const lines = section.split('\n');
    let title: string, content: string;
    if (lines.length >= 2) {
      title = lines[0].trim();
      content = lines.slice(1).join('\n').trim();
    } else {
      title = `Section ${idx + 1}`;
      content = lines[0]?.trim() || '';
    }

    // Section Title (bold, larger, white background for contrast)
    doc.save();
    doc.rect(leftMargin - 10, y - 4, contentWidth + 20, 24).fill('#222');
    doc.fillColor('#fff').font('Helvetica-Bold').fontSize(16);
    doc.text(title, leftMargin, y, { width: contentWidth, align: 'left' });
    doc.restore();
    y += 30;

    // Section Content: bullet points, subheadings, tables, and paragraphs
    const bulletLines = content.split(/\n/).filter(l => l.trim().length > 0);
    let isTable = false;
    let tableRows: string[] = [];
    for (let i = 0; i < bulletLines.length; i++) {
      let line = bulletLines[i];
      // Subheading detection (lines ending with ':' and not a table)
      if (/^[A-Za-z0-9 \-]+:$/g.test(line.trim())) {
        doc.font('Helvetica-Bold').fontSize(13).fillColor('#111');
        doc.text(line.trim(), leftMargin + 5, y, { width: contentWidth - 10 });
        y += 20;
        continue;
      }
      // Table detection: markdown table header
      if (/^\s*\|.*\|\s*$/.test(line)) {
        isTable = true;
        tableRows.push(line);
        // If next line is not a table, render the table
        if (i === bulletLines.length - 1 || !/^\s*\|.*\|\s*$/.test(bulletLines[i + 1])) {
          // Parse table
          const table = tableRows.map(row => row.split('|').slice(1, -1).map(cell => cell.trim()));
          // Calculate column widths
          const colCount = table[0]?.length || 0;
          const colWidths = Array(colCount).fill(0);
          for (let r = 0; r < table.length; r++) {
            for (let c = 0; c < colCount; c++) {
              colWidths[c] = Math.max(colWidths[c], (table[r][c]?.length || 0));
            }
          }
          // Render table
          let tableY = y;
          for (let r = 0; r < table.length; r++) {
            let x = leftMargin;
            for (let c = 0; c < colCount; c++) {
              // Header row
              if (r === 0) {
                doc.save();
                doc.rect(x - 2, tableY - 2, (contentWidth / colCount), 24).fill('#111');
                doc.fillColor('#fff').font('Helvetica-Bold').fontSize(12);
                doc.text(table[r][c], x + 2, tableY + 4, { width: (contentWidth / colCount) - 4, align: 'center' });
                doc.restore();
              } else {
                doc.save();
                doc.rect(x - 2, tableY - 2, (contentWidth / colCount), 22).fill('#fff');
                doc.strokeColor('#bbb').lineWidth(0.7).rect(x - 2, tableY - 2, (contentWidth / colCount), 22).stroke();
                doc.fillColor('#111').font('Helvetica').fontSize(11);
                doc.text(table[r][c], x + 2, tableY + 3, { width: (contentWidth / colCount) - 4, align: 'center' });
                doc.restore();
              }
              x += (contentWidth / colCount);
            }
            tableY += (r === 0 ? 24 : 22);
          }
          y = tableY + 10;
          tableRows = [];
          isTable = false;
        }
        continue;
      }
      // Bullet points
      if (/^[-‚Ä¢]/.test(line.trim())) {
        doc.font('Helvetica-Bold').fontSize(11).fillColor('#222');
        doc.text('‚Ä¢ ' + line.replace(/^[-‚Ä¢]\s*/, ''), leftMargin + 10, y, { width: contentWidth - 10 });
        y += 13;
      } else if (line.trim().length > 0) {
        // Paragraph
        if (title.toLowerCase().includes('roi')) {
          doc.font('Helvetica-Bold').fontSize(11).fillColor('#228b22');
        } else {
          doc.font('Helvetica').fontSize(11).fillColor('#000');
        }
        doc.text(line, leftMargin, y, { width: contentWidth });
        y += doc.heightOfString(line, { width: contentWidth }) + 5;
      }
    }
    y += 18;
    // Add new page if needed
    if (y > 750 && idx < sections.length - 1) {
      doc.addPage();
      y = 50;
    }
  }

  // --- Footer (Streamlit style) ---
  const pageCount = doc.bufferedPageRange().count;
  for (let i = 0; i < pageCount; i++) {
    doc.switchToPage(i);
    doc.fontSize(8).font('Helvetica-Oblique').fillColor('#787878');
    doc.text(`AIntellicost | Page ${i + 1} of ${pageCount}`, 0, 820, { align: 'center' });
  }

  doc.end();
  return Buffer.concat(buffers);
}

// -------------------------------
// Email Sending Function
// -------------------------------
async function sendEmailReport(toEmail: string, pdfData: Buffer, jsonData: any) {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: EMAIL_USER,
      pass: EMAIL_PASS
    }
  });

  const mailOptions = {
    from: EMAIL_USER,
    to: toEmail,
    subject: 'Your AIntellicost Report',
    text: 'Find attached your AI cost optimization report and JSON output.',
    attachments: [
      {
        filename: 'AIntellicost_Report.pdf',
        content: pdfData,
        contentType: 'application/pdf'
      },
      {
        filename: 'AIntellicost_Response.json',
        content: JSON.stringify(jsonData, null, 2),
        contentType: 'application/json'
      }
    ]
  };

  await transporter.sendMail(mailOptions);
}

// -------------------------------
// Suggested Use Cases (same as Streamlit)
// -------------------------------
const suggestedUseCases = {
  "Fintech": "Summarize transactions, generate reports, multilingual chatbot",
  "Legal": "Contract analysis, legal document QA",
  "Logistics": "Track shipments, delivery report summarization, image-based note classification"
};

// -------------------------------
// Main API Handler
// -------------------------------
export async function POST(request: NextRequest) {
  try {
    const formData = await request.json();
    
    // Validate required fields
    if (!formData.domain || !formData.useCase || !formData.teamSize || !formData.budget) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    // Build a highly detailed, actionable prompt for the Lyzr agent (Black & White, Stylish)
    const debugRandom = Math.random().toString(36).substring(2, 10);
    const prompt = [
      `<div style="font-family:'Segoe UI',sans-serif;font-size:15px;line-height:1.7;color:#181818;background:#fff;padding:32px;max-width:900px;margin:auto;border-radius:18px;box-shadow:0 2px 24px 0 #0002;">
  <div style="font-size:30px;font-weight:900;letter-spacing:-1px;text-transform:uppercase;text-align:center;margin-bottom:8px;color:#111;">
    <span style="border-bottom:4px solid #111;padding-bottom:2px;">üéØ AIntellicost Enterprise AI Cost Optimization Report</span>
  </div>
  <div style="text-align:center;font-size:15px;color:#555;margin-bottom:18px;font-style:italic;">Empowering Smarter AI Investments</div>
  <hr style="border:0;border-top:2px solid #111;margin:18px 0 24px 0;">
  <!-- INPUT CONTEXT -->
  <div style="background:#f7f7f7;padding:20px 24px 18px 24px;border-radius:12px;margin-bottom:24px;box-shadow:0 1px 8px #0001;">
    <div style="font-size:20px;font-weight:800;color:#111;letter-spacing:-0.5px;margin-bottom:8px;">üìù Input Context</div>
    <table style="width:100%;margin-top:10px;border-collapse:separate;border-spacing:0 4px;">
      <tr style="background:#111;color:#fff;font-weight:700;">
        <td style="padding:10px 12px;border-radius:6px 0 0 6px;">Field</td>
        <td style="padding:10px 12px;border-radius:0 6px 6px 0;">Value</td>
      </tr>
      <tr style="background:#fff;"><td style="padding:8px 12px;">Business Domain</td><td style="padding:8px 12px;">${formData.domain}</td></tr>
      <tr style="background:#f2f2f2;"><td style="padding:8px 12px;">Planned AI Use Case(s)</td><td style="padding:8px 12px;">${formData.useCase}</td></tr>
      <tr style="background:#fff;"><td style="padding:8px 12px;">Team Size</td><td style="padding:8px 12px;">${formData.teamSize}</td></tr>
      <tr style="background:#f2f2f2;"><td style="padding:8px 12px;">Monthly Budget (USD)</td><td style="padding:8px 12px;">${formData.budget}</td></tr>
      <tr style="background:#fff;"><td style="padding:8px 12px;">Optimization Priority</td><td style="padding:8px 12px;">${formData.priority}</td></tr>
      <tr style="background:#f2f2f2;"><td style="padding:8px 12px;">Cloud Infrastructure</td><td style="padding:8px 12px;">${formData.infrastructure}</td></tr>
      <tr style="background:#fff;"><td style="padding:8px 12px;">Usage Volume (Estimated)</td><td style="padding:8px 12px;">${formData.monthlyVolume}</td></tr>
    </table>
  </div>
  <div style="font-size:18px;font-weight:800;color:#111;margin-bottom:8px;">üìã Structured Output</div>
  <div style="margin-top:10px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:4px;">1. üîç LLM Recommendations</div>
    <table style="width:100%;border-collapse:separate;border-spacing:0 4px;">
      <tr style="background:#111;color:#fff;font-weight:700;">
        <td style="padding:8px 12px;border-radius:6px 0 0 6px;">Model</td>
        <td style="padding:8px 12px;border-radius:0 6px 6px 0;">Reason</td>
      </tr>
      <tr style="background:#fff;"><td style="padding:8px 12px;">Nova Lite</td><td style="padding:8px 12px;">High quality, cost-effective for reasoning tasks</td></tr>
      <tr style="background:#f2f2f2;"><td style="padding:8px 12px;">Mistral Small</td><td style="padding:8px 12px;">Best low-cost inference model for high-volume use</td></tr>
    </table>
  </div>
      <tr><td style="padding:8px 12px;background:#fff;border-radius:6px 0 0 6px;">Claude 3 Haiku</td><td style="padding:8px 12px;background:#fff;border-radius:0 6px 6px 0;">High quality, cost-effective for reasoning tasks</td></tr>
      <tr><td style="padding:8px 12px;background:#f3f3f3;">Amazon Nova 2</td><td style="padding:8px 12px;background:#f3f3f3;">Best low-cost inference model for high-volume use</td></tr>
    </table>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">2. üìä Token Cost Estimation</div>
    <table style="width:100%;border-collapse:separate;border-spacing:0 4px;">
      <tr style="background:#111;color:#fff;font-weight:700;">
        <td style="padding:10px 12px;">Model</td>
        <td style="padding:10px 12px;">Est. Tokens/Task</td>
        <td style="padding:10px 12px;">Est. Monthly Cost</td>
        <td style="padding:10px 12px;">Notes</td>
      </tr>
      <tr><td style="padding:8px 12px;background:#fff;">Claude 3 Haiku</td><td style="padding:8px 12px;background:#fff;">800</td><td style="padding:8px 12px;background:#fff;">$42</td><td style="padding:8px 12px;background:#fff;">Best for summarization</td></tr>
      <tr><td style="padding:8px 12px;background:#f3f3f3;">Nova 2</td><td style="padding:8px 12px;background:#f3f3f3;">600</td><td style="padding:8px 12px;background:#f3f3f3;">$18</td><td style="padding:8px 12px;background:#f3f3f3;">Ideal for chatbot interactions</td></tr>
    </table>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">3. ‚ö†Ô∏è Credit Usage Breakdown</div>
    <table style="width:100%;border-collapse:separate;border-spacing:0 4px;">
      <tr style="background:#111;color:#fff;font-weight:700;">
        <td style="padding:10px 12px;">Action</td>
        <td style="padding:10px 12px;">Credit Usage</td>
        <td style="padding:10px 12px;">Optimization Tips</td>
      </tr>
      <tr><td style="padding:8px 12px;background:#fff;">Multi-turn Chat</td><td style="padding:8px 12px;background:#fff;">High</td><td style="padding:8px 12px;background:#fff;">Reduce history context or use Claude Instant</td></tr>
      <tr><td style="padding:8px 12px;background:#f3f3f3;">RAG + Summarization</td><td style="padding:8px 12px;background:#f3f3f3;">Medium</td><td style="padding:8px 12px;background:#f3f3f3;">Compress retrieved docs, pre-process embeddings</td></tr>
    </table>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">4. üßÆ ROI & Payback Analysis</div>
    <table style="width:100%;border-collapse:separate;border-spacing:0 4px;">
      <tr style="background:#111;color:#fff;font-weight:700;">
        <td style="padding:10px 12px;">Metric</td>
        <td style="padding:10px 12px;">Value</td>
      </tr>
      <tr><td style="padding:8px 12px;background:#fff;">ROI</td><td style="padding:8px 12px;background:#fff;">220%</td></tr>
      <tr><td style="padding:8px 12px;background:#f3f3f3;">Break-even</td><td style="padding:8px 12px;background:#f3f3f3;">5 weeks</td></tr>
      <tr><td style="padding:8px 12px;background:#fff;">TTTV (Time-to-Value)</td><td style="padding:8px 12px;background:#fff;">2 weeks</td></tr>
    </table>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">5. üõ† Agent Architecture Recommendations</div>
    <ul style="padding-left:24px;margin-top:8px;">
      <li style="margin-bottom:6px;"><b>Stateless vs Stateful:</b> Stateless agents with session memory cache</li>
      <li style="margin-bottom:6px;"><b>RAG/Embeddings/Orchestration:</b> Use embeddings + vector DB with a hybrid Claude/Nova setup</li>
      <li style="margin-bottom:6px;"><b>Embeddings vs Full LLM:</b> Use embeddings for FAQs, full LLM only for longform chat</li>
    </ul>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">6. ‚öôÔ∏è Infrastructure Optimization</div>
    <table style="width:100%;border-collapse:separate;border-spacing:0 4px;">
      <tr style="background:#111;color:#fff;font-weight:700;">
        <td style="padding:10px 12px;">Recommendation</td>
        <td style="padding:10px 12px;">Details</td>
      </tr>
      <tr><td style="padding:8px 12px;background:#fff;">Use AWS Bedrock</td><td style="padding:8px 12px;background:#fff;">For Claude, Mistral, and Titan via managed services</td></tr>
      <tr><td style="padding:8px 12px;background:#f3f3f3;">Leverage Lambda</td><td style="padding:8px 12px;background:#f3f3f3;">Trigger agents serverlessly to control costs</td></tr>
    </table>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">7. üì¶ Cost-saving Strategies</div>
    <ul style="padding-left:24px;margin-top:8px;">
      <li style="margin-bottom:6px;">Use Claude Instant or Nova for common queries</li>
      <li style="margin-bottom:6px;">Cache summaries and use vector retrieval to reduce repeat calls</li>
      <li style="margin-bottom:6px;">Batch inference for reporting tasks</li>
    </ul>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">8. üß† LLM Match Score Table</div>
    <table style="width:100%;border-collapse:separate;border-spacing:0 4px;">
      <tr style="background:#111;color:#fff;font-weight:700;">
        <td style="padding:10px 12px;">LLM Model</td>
        <td style="padding:10px 12px;">Cost Efficiency</td>
        <td style="padding:10px 12px;">Latency</td>
        <td style="padding:10px 12px;">Quality</td>
        <td style="padding:10px 12px;">Reasoning</td>
        <td style="padding:10px 12px;">Context Length</td>
        <td style="padding:10px 12px;">Final Score</td>
      </tr>
      <tr><td style="padding:8px 12px;background:#fff;">Claude 3 Sonnet</td><td>‚úÖ‚úÖ</td><td>‚úÖ‚úÖ</td><td>‚úÖ‚úÖ‚úÖ</td><td>‚úÖ‚úÖ‚úÖ‚úÖ</td><td>‚úÖ‚úÖ‚úÖ</td><td>9.2</td></tr>
      <tr><td style="padding:8px 12px;background:#f3f3f3;">Amazon Nova 2</td><td>‚úÖ‚úÖ‚úÖ‚úÖ</td><td>‚úÖ‚úÖ‚úÖ</td><td>‚úÖ</td><td>‚úÖ</td><td>‚úÖ‚úÖ</td><td>8.7</td></tr>
      <tr><td style="padding:8px 12px;background:#fff;">Mistral</td><td>‚úÖ‚úÖ</td><td>‚úÖ‚úÖ‚úÖ</td><td>‚úÖ</td><td>‚úÖ‚úÖ</td><td>‚úÖ</td><td>7.9</td></tr>
      <tr><td style="padding:8px 12px;background:#f3f3f3;">Titan</td><td>‚úÖ‚úÖ‚úÖ</td><td>‚úÖ‚úÖ</td><td>‚úÖ</td><td>‚úÖ</td><td>‚úÖ‚úÖ</td><td>8.1</td></tr>
    </table>
  </div>
  <div style="margin-top:32px;">
    <div style="font-size:16px;font-weight:700;color:#111;margin-bottom:6px;">9. üìÑ Final Summary Report</div>
    <div style="background:#f7f7f7;padding:16px 24px;border-radius:10px;margin-top:10px;color:#111;font-size:15px;font-weight:500;box-shadow:0 1px 4px #0001;">
      <b>Executive Summary:</b> Claude 3 and Amazon Nova are the most cost-optimized choices for your use case. AWS Bedrock provides managed access with serverless deployment options. Estimated ROI is 220%, with a 5-week break-even. Use retrieval + batching for maximum savings.
    </div>
  </div>
  <hr style="margin-top:32px;border:0;border-top:2px solid #111;">
  <div style="color:#111;font-weight:700;font-size:15px;text-align:center;margin-top:18px;">
    ‚úÖ This report is tailored to your AI use case. Use it to guide technical and financial decisions when deploying AI agents in your enterprise.
  </div>
</div>`
    ].join('\n');

    // Log the prompt and payload for debugging
    console.log("Lyzr API prompt:\n", prompt);

    // Generate session ID (same format as Streamlit)
    const sessionId = `${LYZR_AGENT_ID}-${Math.random().toString(36).substring(2, 10)}`;

    // Prepare the payload for the Lyzr API (pass all user data for traceability)
    const payload = {
      user_id: formData.email || EMAIL_USER,
      agent_id: LYZR_AGENT_ID,
      session_id: sessionId,
      message: prompt,
      // Pass all user fields for traceability/debugging (Lyzr agent can use these if needed)
      domain: formData.domain,
      useCase: formData.useCase,
      teamSize: formData.teamSize,
      budget: formData.budget,
      priority: formData.priority,
      infrastructure: formData.infrastructure,
      monthlyVolume: formData.monthlyVolume,
      currentModels: formData.currentModels,
      organizationalFunctions: formData.organizationalFunctions,
      email: formData.email,
      debugRandom,
      // Add a timestamp for traceability
      requestTimestamp: new Date().toISOString()
    };
    console.log("Lyzr API payload:", JSON.stringify(payload, null, 2));

    // Set up headers for the Lyzr API request
    const headers = new Headers({
      "Content-Type": "application/json",
      "x-api-key": LYZR_API_KEY
    });

    // Send the request to the Lyzr API
    const lyzrRes = await fetch(
      "https://agent-prod.studio.lyzr.ai/v3/inference/chat/",
      {
        method: "POST",
        headers,
        body: JSON.stringify(payload)
      }
    );

    // Handle errors from the Lyzr API
    if (!lyzrRes.ok) {
      const text = await lyzrRes.text();
      console.error("Lyzr API error:", text);
      return NextResponse.json({ error: "Lyzr API error", details: text }, { status: 500 });
    }

    // Parse and clean the Lyzr API response
    const lyzrData: any = await lyzrRes.json();
    console.log("Lyzr API raw response:", JSON.stringify(lyzrData, null, 2));

    // Extract the main result (same logic as Streamlit)
    let result = lyzrData.response || lyzrData.output || "‚ö†Ô∏è No usable output found.";

    // Clean and format the result (replicating Streamlit's markdown processing)
    if (typeof result === 'string') {
      // Remove HTML tags
      result = result.replace(/<[^>]+>/g, '');
      
      // Streamlit-style formatting (closely mimics your Python logic)
      // 1. Add extra blank lines before and after section headers (emoji or normal)
      result = result.replace(/\n?([üß†üí∞üõ†Ô∏èüìäüìàüìâüîç][^\n:]*:)/g, '\n\n$1\n\n');
      result = result.replace(/\n?([A-Z][A-Za-z0-9 \-]{2,}:)/g, '\n\n$1\n\n');
      
      // 2. Bullet points: always use '‚Ä¢' and ensure a blank line before a list
      result = result.replace(/(\n)([-‚Ä¢] )/g, '\n\n‚Ä¢ ');
      result = result.replace(/^[-‚Ä¢] /gm, '‚Ä¢ ');
      
      // 3. Tables: add two blank lines before and after markdown tables
      result = result.replace(/(\n\|[^\n]+\|\n\|[-| ]+\|)/g, '\n\n$1\n\n');
      
      // 4. Clean up: collapse 4+ blank lines to 2, then 3+ to 2, then trim
      result = result.replace(/\n{4,}/g, '\n\n');
      result = result.replace(/\n{3,}/g, '\n\n');
      result = result.replace(/^[ \t]+/gm, '');
      result = result.trim();
    }

    // Generate PDF if requested
    let pdfBuffer: Buffer | null = null;
    if (formData.generatePdf) {
      try {
        pdfBuffer = generateStructuredPdf(result);
      } catch (pdfError) {
        console.error("PDF generation error:", pdfError);
        // Continue without PDF if generation fails
      }
    }

    // Send email if requested
    if (formData.sendEmail && formData.email) {
      try {
        await sendEmailReport(
          formData.email,
          pdfBuffer || Buffer.from("PDF generation failed"),
          lyzrData
        );
      } catch (emailError) {
        console.error("Email sending error:", emailError);
        // Continue without email if sending fails
      }
    }

    // Return structured JSON response (same format as Streamlit expects)
    return NextResponse.json({
      response: result,
      raw: lyzrData,
      pdf: pdfBuffer ? pdfBuffer.toString('base64') : null,
      suggestedUseCases: suggestedUseCases,
      success: true
    });

  } catch (error) {
    // Handle unexpected errors
    console.error("Optimization API error:", error);
    return NextResponse.json({ 
      error: "Failed to generate optimization report", 
      details: error instanceof Error ? error.message : "Unknown error"
    }, { status: 500 });
  }
}

// -------------------------------
// Additional helper functions for frontend integration
// -------------------------------
export async function GET(request: NextRequest) {
  // Return suggested use cases for frontend dropdown population
  return NextResponse.json({
    suggestedUseCases: suggestedUseCases,
    domains: Object.keys(suggestedUseCases),
    priorities: ["cost", "latency", "quality", "balance"],
    infrastructures: ["AWS", "Azure", "GCP", "None"]
  });
}
// End of file